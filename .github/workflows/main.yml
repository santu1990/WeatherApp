on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  PROJECT_NAME: WeatherForecast
  SCHEME_NAME: WeatherForecast

jobs:
  test:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log Available Xcode Versions
        run: ls /Applications | grep "Xcode"

      - name: Select Compatible Xcode Version
        run: |
          XCODE_VERSION=$(ls /Applications | grep "Xcode" | sort -r | head -n 1)
          echo "Using Xcode version: $XCODE_VERSION"
          sudo xcode-select -s /Applications/$XCODE_VERSION/Contents/Developer
          xcodebuild -version

      - name: List Available Simulators (Debugging Step)
        run: xcrun simctl list devices

      - name: Ensure "iOS CI" Simulator Exists
        run: |
          if ! xcrun simctl list devices | grep -q "iOS CI"; then
            xcrun simctl delete "iOS CI" || true
            xcrun simctl create "iOS CI" "iPhone 16" "com.apple.CoreSimulator.SimRuntime.iOS-18-2"
          fi

      - name: Verify Project File Exists
        run: ls -R

      - name: Determine Project File Location
        run: |
          if [ -f "$PROJECT_NAME.xcodeproj/project.pbxproj" ]; then
            echo "Project file found in root."
            echo "PROJECT_PATH=$PROJECT_NAME.xcodeproj" >> $GITHUB_ENV
          elif [ -f "$PROJECT_NAME/$PROJECT_NAME.xcodeproj/project.pbxproj" ]; then
            echo "Project file found in $PROJECT_NAME directory."
            echo "PROJECT_PATH=$PROJECT_NAME/$PROJECT_NAME.xcodeproj" >> $GITHUB_ENV
          else
            echo "Error: $PROJECT_NAME.xcodeproj not found!"
            exit 1
          fi

      # ✅ Run SwiftLint
      - name: Install SwiftLint
        run: brew install swiftlint

      - name: Run SwiftLint
        run: swiftlint --strict

      - name: Build and run tests
        run: |
          xcodebuild test \
            -project $PROJECT_PATH \
            -scheme $SCHEME_NAME \
            -destination 'platform=iOS Simulator,name=iOS CI,OS=latest' \
            -enableCodeCoverage YES | xcpretty && exit ${PIPESTATUS[0]}

      - name: Run Unit Tests
        run: |
          xcodebuild test \
            -project $PROJECT_PATH \
            -scheme $SCHEME_NAME \
            -destination 'platform=iOS Simulator,name=iOS CI,OS=latest' \
            -only-testing:${SCHEME_NAME}Tests \
            -enableCodeCoverage YES | xcpretty && exit ${PIPESTATUS[0]}

      # ✅ Upload Test Results
      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: TestResults
          path: TestResults.xcresult

      # ✅ Deploy to TestFlight (Commented Out)
      # - name: Setup Fastlane
      #   run: brew install fastlane

      # - name: Deploy to TestFlight
      #   run: fastlane beta
